@page "/fetchdata"
@using APIHandler;

@inject ServerAPIHandler serverAPIHandler;
@inject IHttpClientFactory ClientFactory

<style>
    body {
        background-color: #0f292f;
    }
    .normal-text {
        color: #CCCCCC;
        font-family: bender-bold;
    }
</style>
<Row>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="cpuCore1" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="cpuCore2" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="cpuCore3" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="cpuCore4" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="cpuCore5" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="cpuCore6" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="cpuCore7" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="cpuCore8" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="gpuCoreUtilization" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="gpuMemoryUtilization" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="gpuPowerDraw" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="gpuTemperature" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <Chart @ref="HDD1PieChart" Type="ChartType.Pie" TItem="double" Options="@pieChartOptions" />
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <Chart @ref="HDD2PieChart" Type="ChartType.Pie" TItem="double" Options="@pieChartOptions" />
    </Column>
    <Column ColumnSize="ColumnSize.Is3.OnWidescreen">
        <LineChart @ref="memoryPercent" TItem="double" OptionsObject="@chartOptions"/>
    </Column>
</Row>
<br/>
<div class="center">
    <Button Color="Blazorise.Color.Light" Outline Clicked="@(async () => await HandleRedrawCPU())">Refresh CPU</Button>
    <Button Color="Blazorise.Color.Light" Outline Clicked="@(async () => await HandleRedrawGPU())">Refresh GPU</Button>
    <Button Color="Blazorise.Color.Light" Outline Clicked="@(async () => await HandleRedrawHDDs())">Refresh Harddrives</Button>
    <Button Color="Blazorise.Color.Light" Outline Clicked="@(async () => await HandleRedrawMemory())">Refresh Memory</Button>
</div>

@code
{
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    
    protected override async Task OnInitializedAsync()
    {
        shouldRender = true;
    }
    LineChart<double> cpuCore1;
    LineChart<double> cpuCore2;
    LineChart<double> cpuCore3;
    LineChart<double> cpuCore4;
    LineChart<double> cpuCore5;
    LineChart<double> cpuCore6;
    LineChart<double> cpuCore7;
    LineChart<double> cpuCore8;
    LineChart<double> gpuCoreUtilization;
    LineChart<double> gpuMemoryUtilization;
    LineChart<double> gpuPowerDraw;
    LineChart<double> gpuTemperature;
    Chart<double> HDD1PieChart;
    Chart<double> HDD2PieChart;
    LineChart<double> memoryPercent;

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await HandleRedrawCPU();
            await HandleRedrawGPU();
            await HandleRedrawHDDs();
            await HandleRedrawMemory();
        }
    }

    async Task HandleRedrawMemory()
    {
        await memoryPercent.Clear();
        var memoryData = await serverAPIHandler.GetFiveMinDataSplitIntoDictMemoryPercent();
        List<double> memoryPercentData = new List<double>();
        foreach (var kvp in memoryData)
        {
            memoryPercentData.Add(kvp.Value);
        }
        memoryPercentData.Reverse();
        await memoryPercent.AddLabelsDatasetsAndUpdate(xAxis, GetLineChartDataset(memoryPercentData, "Memory usage"));
    }
    async Task HandleRedrawHDDs()
    {
        await HDD1PieChart.Clear();
        await HDD2PieChart.Clear();
        string[] labelsForHDD = {"free [GB]", "used [GB]"};
        var HDDData = await serverAPIHandler.GetCurretHardDriveData();
        List<double> HDD1Data = new List<double>();
        List<double> HDD2Data = new List<double>();
        HDD1Data.Add(HDDData.Item1);
        HDD1Data.Add(HDDData.Item2);
        HDD2Data.Add(HDDData.Item3);
        HDD2Data.Add(HDDData.Item4);
        await HDD1PieChart.AddLabelsDatasetsAndUpdate(labelsForHDD, GetPieChartDataset(HDD1Data, "Harddrive 1"));
        await HDD2PieChart.AddLabelsDatasetsAndUpdate(labelsForHDD, GetPieChartDataset(HDD2Data, "Harddrive 2"));
    }
    async Task HandleRedrawCPU()
    {
        await cpuCore1.Clear();
        await cpuCore2.Clear();
        await cpuCore3.Clear();
        await cpuCore4.Clear();
        await cpuCore5.Clear();
        await cpuCore6.Clear();
        await cpuCore7.Clear();
        await cpuCore8.Clear();

        var cpuData = await serverAPIHandler.GetFiveMinDataSplitIntoDictCpu();
        
        List<double> core1 = new List<double>();
        List<double> core2 = new List<double>();
        List<double> core3 = new List<double>();
        List<double> core4 = new List<double>();
        List<double> core5 = new List<double>();
        List<double> core6 = new List<double>();
        List<double> core7 = new List<double>();
        List<double> core8 = new List<double>();

        for (int i = 0; i < cpuData.Count; i++)
        {
            switch (i)
            {
                case 0:
                    foreach (var val in cpuData[i].Values)
                    {
                        core1.Add(val);
                    }
                    break;
                case 1:
                    foreach (var val in cpuData[i].Values)
                    {
                        core2.Add(val);
                    }
                    break;    
                case 2:
                    foreach (var val in cpuData[i].Values)
                    {
                        core3.Add(val);
                    }
                    break;
                case 3:
                    foreach (var val in cpuData[i].Values)
                    {
                        core4.Add(val);
                    }
                    break;
                case 4:
                    foreach (var val in cpuData[i].Values)
                    {
                        core5.Add(val);
                    }
                    break;
                case 5:
                    foreach (var val in cpuData[i].Values)
                    {
                        core6.Add(val);
                    }
                    break;
                case 6:
                    foreach (var val in cpuData[i].Values)
                    {
                        core7.Add(val);
                    }
                    break;
                case 7:
                    foreach (var val in cpuData[i].Values)
                    {
                        core8.Add(val);
                    }
                    break;    
            }
            
        }
        core1.Reverse();
        core2.Reverse();
        core3.Reverse();
        core4.Reverse();
        core5.Reverse();
        core6.Reverse();
        core7.Reverse();
        core8.Reverse();
        await cpuCore1.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(core1, "Core1") );
        await cpuCore2.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(core2, "Core2") );
        await cpuCore3.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(core3, "Core3") );
        await cpuCore4.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(core4, "Core4") );
        await cpuCore5.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(core5, "Core5") );
        await cpuCore6.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(core6, "Core6") );
        await cpuCore7.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(core7, "Core7") );
        await cpuCore8.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(core8, "Core8") );
        //await setDataForTest();
    }

    async Task HandleRedrawGPU()
    {
        await gpuCoreUtilization.Clear();
        await gpuMemoryUtilization.Clear();
        await gpuPowerDraw.Clear();
        await gpuTemperature.Clear();

        var gpuData = await serverAPIHandler.GetFiveMinDataSplitIntoDictGPU();

        List<double> gpucoreutil = new List<double>();
        List<double> gpumemutil = new List<double>();
        List<double> gpupowerdraw = new List<double>();
        List<double> gputemp = new List<double>();

        for (int i = 0; i < gpuData.Count; i++)
        {
            switch (i)
            {
                case 0:
                    foreach (var val in gpuData[i].Values)
                    {
                        gpupowerdraw.Add(val);
                    }
                    break;
                case 1:
                    foreach (var val in gpuData[i].Values)
                    {
                        gputemp.Add(val);
                    }
                    break;
                case 2:
                    foreach (var val in gpuData[i].Values)
                    {
                        gpumemutil.Add(val);
                    }
                    break;
                case 3:
                    foreach (var val in gpuData[i].Values)
                    {
                        gpucoreutil.Add(val);
                    }
                    break;
            }
        }
        gpupowerdraw.Reverse();
        gputemp.Reverse();
        gpumemutil.Reverse();
        gpucoreutil.Reverse();
        
        await gpuPowerDraw.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(gpupowerdraw, "GPU PowerUsage") );
        await gpuTemperature.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(gputemp, "GPU Temperature") );
        await gpuMemoryUtilization.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(gpumemutil, "GPU Memory Utilization") );
        await gpuCoreUtilization.AddLabelsDatasetsAndUpdate( xAxis, GetLineChartDataset(gpucoreutil, "GPU Core Utilization") );
    }

    LineChartDataset<double> GetLineChartDataset(List<double> data, string chartName)
    {
        return new LineChartDataset<double>
        {
            
            Label = chartName,
            Data = data,
            BackgroundColor = backgroundColors[0],
            BorderColor = borderColors[0],
            Fill = false,
            PointRadius = 2,
            BorderDash = new List<int> { }
        };
    }
    private PieChartDataset<double> GetPieChartDataset(List<double> data, string chartName)
    {
        return new()
        {
            Label = chartName,
            Data = data,
            BackgroundColor = backgroundColors[0],
            BorderColor = borderColors[0],
            BorderWidth = 1
        };
    }
    object chartOptions = new
    {
        Scales = new
        {
            YAxes = new[] {
                new {
                    Ticks = new
                    {
                        BeginAtZero = true,
                        Min = 0,
                        Max = 100,
                    }
                }
            }
        }
    };
    ChartOptions pieChartOptions = new()
    {
        AspectRatio = 1.5
    };
    /*
    async Task setDataForTest()
    {
        var asdf = await serverAPIHandler.GetFiveMinDataSplitIntoDict();
        minute1 = $"element 0 = {asdf.Keys.ElementAt(0)} - {asdf.Values.ElementAt(0)}";
        minute2 = $"element 1 = {asdf.Keys.ElementAt(1)} - {asdf.Values.ElementAt(1)}";
        minute3 = $"element 2 = {asdf.Keys.ElementAt(2)} - {asdf.Values.ElementAt(2)}";
        minute4 = $"element 3 = {asdf.Keys.ElementAt(3)} - {asdf.Values.ElementAt(3)}";
        minute5 = $"element 4 = {asdf.Keys.ElementAt(4)} - {asdf.Values.ElementAt(4)}";
    }
    */
    string[] xAxis = { "4-5min", "3-4min", "2-3min", "1-2min", "0-1min"};
    List<string> backgroundColors = new() { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new() { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };
    
}